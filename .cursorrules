# .cursorrules — Plataforma de Gestión de Pisos Turísticos

## 0) Propósito
Mantener un producto **líder del sector**, con código **de nivel profesional (Senior Laravel)** y una UX/UI **excelente**, coherente, accesible y responsive.  
Style guides obligatorios:
- Empleado (limpieza / reservas / mantenimiento): `PLATAFORMA_GESTION_LIMPIEZA_STYLE_GUIDE.md`
- Admin: `PLATAFORMA_ADMIN_STYLE_GUIDE.md`

> Si algún style guide falta o está incompleto: **detener cambio y reportar** antes de continuar.

## 0.1) Perfil profesional exigido (imprescindible)
- **Actúa como Desarrollador Senior de Laravel, Javascript, Blade y Aplicaciones**: aplica patrones, estándares y calidad de código propios de un profesional experimentado.
- **Actúa como Experto en UX/UI**: toma decisiones de interfaz y experiencia aplicando principios sólidos, pruebas y heurísticas, para una plataforma **puntera**.

---

## 1) Alcance funcional (módulos)
Core: Propiedades, Unidades, Reservas/Calendario, Huéspedes, Inventario, Roles/Permisos, Notificaciones.  
Empleado: Limpieza (tareas, checklist, fotos), Mantenimiento (partes, prioridades, adjuntos), turnos/incidencias.  
Admin: Métricas, gestión de usuarios/roles, pricing/fees, auditoría, exportaciones.

> Usa **máquinas de estado** o validaciones claras (p.ej. `pendiente → en_proceso → completada/cancelada`).

---

## 2) Comportamiento del agente (chat)
- Responde **claro, accionable y con justificación técnica**.
- Antes de añadir dependencias, **verifica** si el stack o style guide lo contempla; si no, propone 1–2 alternativas con pros/contras y plan de rollback.
- **No inventes datos**; revisa README/CONTRIBUTING y style guides. Si persiste la duda, plantea opciones y pide decisión.

---

## 3) Estándares **Senior Laravel**
- **Versión**: PHP ≥ 8.2, Laravel ≥ 10/11. Tipado estricto, `return types`, `readonly` cuando aplique.
- **Estructura limpia**: Controladores finos + **Actions/Services** con SRP. Repositorios solo cuando aporte valor real (tests, abstracción).
- **Validación**: **FormRequest** siempre. **Policies/Gates** para autorización (RBAC estricto).
- **Serialización**: **API Resources/DTOs**; nunca exponer modelos crudos en APIs públicas.
- **Eloquent**: evita N+1 (`with`, `withCount`), índices adecuados, transacciones en operaciones críticas.
- **Eventos/Listeners**, **Jobs/Queues** para procesos pesados, **Notifications** para avisos.
- **Observers** para efectos colaterales de modelos (limpieza de archivos, logs).
- **Migrations** con FKs y `down()`; **Factories/Seeders** realistas.
- **Configuración** en `.env`. Prohibido secretos en el repo.
- **Calidad**: Laravel Pint (estilo), PHPStan (nivel alto), tests con **Pest** (Unit/Feature/E2E).
- **Rendimiento**: `route:cache`, `config:cache`, cache de catálogos; evita recomputar.
- **APIs**: REST v1 con paginación, filtros, orden; errores JSON consistentes (códigos HTTP correctos).
- **Observabilidad**: logs estructurados (sin PII), trazas/IDs de correlación donde aplique.

---

## 4) UX/UI de **nivel experto**
- **Mobile-first** con aspecto de **app** en empleado; **densidad informativa controlada** en admin.
- **Tablas → Cards en móvil** (sin scroll horizontal). Card con: ID + estado, campos clave, CTA clara.
- **Heurísticas de Nielsen** aplicadas: visibilidad de estado del sistema, control/feedback, prevención de errores, consistencia, reconocimiento sobre memorización, etc.
- **Accesibilidad (WCAG AA)**: contraste, focus visible, navegación teclado, ARIA roles, labels útiles.
- **Estados diseñados**: loading (skeletons), vacío, error, éxito, vacíos con CTA (no “pantallas muertas”).
- **Microinteracciones**: confirmaciones para acciones destructivas, toasts no intrusivos, feedback inmediato.
- **Microcopy** clara en español (es-ES): botones verbales (“Guardar cambios”), errores accionables.
- **Patrones reutilizables**: formularios consistentes, filtros persistentes (URL/store), paginación, buscadores con debounce.
- **Productividad del rol**: en vistas de limpieza y mantenimiento, minimizar toques/campos, presets, accesos directos a “marcar completo”, fotos antes/después, checklists grandes (≥44px hit-area).

---

## 5) Responsive obligatorio
- **Escritorio**: tablas si aportan visión global.
- **Móvil**: **cards** con la información esencial y CTAs al final.  
- Componentes `ResponsiveTable`/`CardList` reutilizables con slots.
- Nunca ocultar información crítica en móvil. Evitar truncar.

Ejemplo base:
```html
<!-- Desktop -->
<table class="table desktop-only">…</table>

<!-- Mobile -->
<div class="cards mobile-only">
  <article class="card">
    <header>
      <h3>#T-1842</h3>
      <span class="badge badge--warning">En proceso</span>
    </header>
    <ul>
      <li>Unidad: Ático Costa</li>
      <li>Horario: 31/08 10:00</li>
    </ul>
    <footer><button>Ver</button></footer>
  </article>
</div>
